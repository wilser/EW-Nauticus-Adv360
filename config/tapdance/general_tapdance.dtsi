/*****************************************************************************************************
 *  TAP DANCE configurations
 *  for general cases
 *  [ ] macro-ify?
 *****************************************************************************************************/
#include <dt-bindings/zmk/keys.h>

// INCLUDE THIS inside Behaviors section of Keymap where other dependencies already pre-included

// 2024-04-16: label removed from ZMK v3

TD_Emj_WinDsk: tapdance_emoji_windesktopchange {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&kp RG(SEMI)>, <&kp RG(TAB)>; // [1x] Win+; (Emoji pop-up)    [2x] Win+Tab (Windows desktops)
};

TD_CpWrd_CpLock: tapdance_capsword_capslock {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&caps_word>, <&kp CAPSLOCK>;
};

/* Home/End: 2024-04-21 replaced with Hold/Tap instead of 2x-tap
TD_Hm_CtrlHm: tapdance_home_ctrlhome {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&kp HOME>, <&kp RC(HOME)>;
};

TD_En_CtrlEn: tapdance_end_ctrlend {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&kp END>, <&kp RC(END)>;
};
*/

TD_WinScreenshot_SnagIt: tapdance_winss_snagitss {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&kp LG(LS(S))>, <&kp RC(RS(RA(P)))>;  // [1x] Win+Shift+S   [2x] Ctrl+Shift+Alt+P (customized in SnagIt settings)
};

// goal: 1x tap = BKSP, Hold = Ctl(bksp), 2x-tap-hold = repeat-backspace (see use with &as)
// idea: 2x-tap skips over the Hold behavior the &as would have caused.
// 2024-04-21: WIP, not in use yet; not right combo-syntax for the layout.
// 2024-04-21: an auto-shift with deliberate tapping-term &c works - see layout
// TD_BkspHoldTap: tapdance_bksp_holdtap {
//     compatible = "zmk,behavior-tap-dance";
//     #binding-cells = <0>;
//     tapping-term-ms = <300>;
//     bindings = <&as_slw RC(BSPC) BSPC>, <&kp BKSP>;
// };

// 2024-07-23 special for 2x-tap 'Menu-key' to add "P" [for OneNote when rt-click on a paragraph; to get link to paragraph]
// 1st-tap is an AutoShift(hold) case - SO...
// 1-tap: rt-click menu; 2-tap: "P"; Hold: Ctrl+Q
TD_Rtclick_P: tapdance_rtclick_p {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <225>; // 150 too fast, 300 too slow?
    bindings = <&as RC(Q) K_CMENU>, <&kp P>; 
};



// PRIOR one trying to replace:

TD_Num_LR_NLock: tapdance_num_lr_numlock {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&mo L_NUM>, <&to L_NUM>, <&to L_LR>; // [hold] Num   [2x] to NUM  [3x] to LR
};



// ************************************************** THUMB - 

// goal: hold = NUM; [1x] >NUM; [2x] >LR
// ▢ tapping terms?

// --------------------
// ▣ NOT WORKING
// TRY 1: tap-dance > inner ref to specific layer-hold-tap pre-defined
// make layer-hold-tap for 1st binding of the tap-dance
// then 1,2 tap does the layer-hold-tap 1st then 2nd TO layer

/*
LHT_Num_ToNum: layerholdtap_Num_ToNum {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <0>; // because passing in directly in definition below
    tapping-term-ms = <300>;
    quick-tap-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo L_NUM>, <&to L_NUM>; // << putting here means <0> bindings (parms)
};

TD_Num_NumLock_LR: tapdance_Num_NumLock_LR {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <0>;
    tapping-term-ms = <300>;
    bindings = <&LHT_Num_ToNum 0>, <&to L_LR>; // 1-tap = a layer-hold-tap; 2-tap = the jump other layer
};
*/


// --------------------
// ▣ NOT WORKING
// TRY 2: layer-hold-tap , then include pre-defined tap-dance for the <tap> part
// ALSO not working


// --------------------
// ▣ NOT working - TEMP using prior one for now
// TRY 3: tap-dance that defines 3 parms / but &mo; &to; &to
/*
TD_MO_TO_TO: tapdance_MO_TO_TO {
    compatible = "zmk,behavior-tap-dance";
    #binding-cells = <3>;
    tapping-term-ms = <300>;
    bindings = <&mo>, <&to>, <&to>;
};
*/

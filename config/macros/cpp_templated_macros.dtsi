// needed if included elsewhere?
#include <dt-bindings/zmk/keys.h>

/* TAP ONCE (don't repeat when held)
 * TBD experiment - macro to "press once" a key / based on CPP template
 * adapted from: https://github.com/manna-harbour/miryoku_zmk/blob/master/miryoku/miryoku_kludge_tapdelay.h
 * see also: https://www.reddit.com/r/olkb/comments/ys9y1h/how_to_prevent_zmk_repeating_a_key_when_held/
 */

// unsure need:
// #pragma once

// CPP macro from example:
/*
#define m_TAPONCE(CODE) \
/ { \
  macros { \
    ZMK_MACRO(m_taponce_##CODE, bindings = <&macro_press &kp CODE>, <&macro_release &kp CODE>;) \
  }; \
};
*/


//==================================================

            // [.] WIP - not working yet / 2023-06-18

//==================================================

// maybe fix "label" to just a string - string concat issue?

// EW try own CPP macro format:
#define m_1TAP(KEY) \
    m_1TAP_##KEY: m_1TAP_##KEY { \
        compatible = "zmk,behavior-macro"; \
        label = "m_1TAP_" str(KEY) ; \
        //label = str(KEY) ; \  <-- maybe don't need or can hard-code literal?
        wait-ms = <20>; \
        tap-ms = <30>; \
        #binding-cells = <0>; \
        bindings = <&macro_press &kp KEY>, <&macro_release &kp KEY>; \
    }; 


// build CPP-macro created list:
/*
{
    // 2023-06-18: temp test: need #6-9, and F9 for Lightroom layer
    macros {
        ZMK_MACRO(m_taponce_N6, bindings = <&macro_press &kp N6>, <&macro_release &kp N6>);
        ZMK_MACRO(m_taponce_N7, bindings = <&macro_press &kp N7>, <&macro_release &kp N7>);
        ZMK_MACRO(m_taponce_N8, bindings = <&macro_press &kp N8>, <&macro_release &kp N8>);
        ZMK_MACRO(m_taponce_N9, bindings = <&macro_press &kp N9>, <&macro_release &kp N9>);
        ZMK_MACRO(m_taponce_F9, bindings = <&macro_press &kp F9>, <&macro_release &kp F9>);
    };
};
*/

// try one brute force to see if works before the sub ones
m_1TAP_EW_N6: m_1TAP_EW_N6{
    compatible = "zmk,behavior-macro";
    label = "m_1TAP_EW_N6";
    wait-ms = <40>;
    tap-ms = <20>;
    #binding-cells = <0>;
    bindings = <&macro_press &kp N6>;
};

// generate many via macros:
m_1TAP(N7)
//m_1TAP(N8)

// [ ] maybe a direct "hold tap" case but which sends the "macro press" instead of just &kp?
// see as1t in adv360.keymap also

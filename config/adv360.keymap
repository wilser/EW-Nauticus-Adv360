
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <behaviors.dtsi>   // TODO: much of this overridden (I think) or bypassed by parts inside this *keymap file / UNSURE WHAT NEEDED (2024-04-13)


// DEFINE keymaps and subsets // NOTE: major re-numbering after V3 rebase. Moves thumb-keys inline to rows 3-5.

    /* Keymap layout vs. Numbers

         0  1  2  3  4  5  6                     7  8  9 10 11 12 13 
        14 15 16 17 18 19 20                    21 22 23 24 25 26 27 
        28 29 30 31 32 33 34    35 36  37 38    39 40 41 42 43 44 45  
        42 43 44 45 46 47          52  53          54 55 56 57 58 59  
        54 55 56 57 58       65 66 67  68 69 70       71 72 73 74 75  


    */

    /* define LEFT, RIGHT, and THUMBS to affect hold-tap timings vs. finger rolls */
    #define KEYS_LEFT    0  1  2  3  4  5  6 \
                        14 15 16 17 18 19 20 \
                        28 29 30 31 32 33 34 \
                        46 47 48 49 50 51    \
                        60 61 62 63 64

    #define THUMBS_LEFT     35 36 \
                             52 \
                     65 66 67 \

    #define KEYS_RIGHT   7  8  9 10 11 12 13 \
                        21 22 23 24 25 26 27 \
                        39 40 41 42 43 44 45 \
                        54 55 56 57 58 59 \
                            71 72 73 74 75

    #define THUMBS_RIGHT 37 38    \
                          53       \
                           68 69 70 \

    #define THUMBS THUMBS_LEFT THUMBS_RIGHT

    #define MODS_LEFT 15 16 17 18
    #define MODS_RIGHT 23 24 25 26

// END key-numbers define

// Helpers for common key-defaults (block [&none] or passthrough [&trans])
#define ___ &trans
#define _x_ &none
#define _tbd_ &none
#define nil 0

// DEFINES for layers:
    /* LED layer colors:  0 âš«   1 âšª   2 ðŸ”µ   3 ðŸŸ¢   4 ðŸ”´   5 ðŸŸ£   6 ðŸ§¢    7 â–¢    */
    /*                    NGM     DVK    LR      NUM    UTIL    FNC    NavEd   kp#     */
    #define L_0 0
    #define L_NGM 0     // engram
    #define L_DVK 1     // dvorak
    #define L_LR 2      // Lightroom
    #define L_NUM 3     // numpad
    #define L_UTL 4     // utils
    #define L_FNC 5     // function keys 1-12 (like numpad)
    #define L_EDT 6     // edit (mostly LH while RH uses mouse, or general use)
    #define L_LET 7     // plain letters - mirroring NGM - so can use the "hold-for-accents" utility
    #define L_KP 8      // keypad (*actual KP key codes) (rare)
    
// END defines for layers

/* TAPPING timeouts, flavors, etc.
    try disable global-quick-tap, & set quick-tap-ms faster like 125
    one suggested like 75 for the "global-quick-tap-ms" [which seems maybe new/ish]
    try remove 'hold trigger' positions to see
        so far seems better; maybe the #-key array is off? - [] how to test?
*/

// Layer tap defaults?
&lt {
    quick-tap-ms = <125>;  /* was 300 */
    global-quick-tap;
};

// Mod-tap defaults?
&mt {
    tapping-term-ms = <300>;
};

// capsWORD symbols accepted list overrides (additional ones to NOT disrupt). These are my prefs for mostly business, not coding, use-cases.
&caps_word {
    continue-list = <UNDERSCORE MINUS SLASH PIPE BKSP>;
};

/ {
    macros {
        #include "macros/general_macros.dtsi"
        #include "macros/shortcuts_macros.dtsi"
        #include "macros/hold_mods_delays.dtsi"
        //#include "macros/tap_hold_macros.dtsi"
        #include "macros/combo_letters_macros.dtsi"
    };

    combos {
        #include "combos.dtsi"
    };

    behaviors {
        #include "tapdance/general_tapdance.dtsi"
        #include "tapdance/lightroom_tapdance.dtsi"
        #include "behaviors/mod_morphs_general.dtsi"
        #include "behaviors/mod_morphs_dvorak.dtsi"
        #include "behaviors/mod_morphs_engram.dtsi"
        #include "behaviors/mod_morphs_nums.dtsi"

        /*  NOTES - hold-tap
            FLAVORS: https://zmk.dev/docs/behaviors/hold-tap
                balanced: best for most cases, if hold long enough, thinks a hold, or if fast but w/in time, then hold, else tap (*default best)
                tap-preferred: assume tap unless more strict timing met; more 'deliberate'
                hold-preferred: more forgiving (& more false-holds)
                tap-unless-interrupted: [NMI] seems to assume tap even if slower, unless some other key pressed (so if - was the hold, would yield ----------.... I think, but "-x" faster would be <Hold>+<X>)
        */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;  /* was typo, and 175 */
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>; /* was typo, and 175 */
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS MODS_LEFT>;
            /* TEMP: â†‘ adding MODS_LEFT to see if can n-hold mods */
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;  /* was typo, and 175 */
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS MODS_RIGHT>;
            /* TEMP: â†‘ adding MODS_RIGHT to see if can n-hold better */
        };

        /* [.] experimental: "slower" home-row mod for Win key since don't need to be fast and false-taps mess up worse */
        hm_slw: homerow_mods_slw {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>; 
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        /* TBD auto-shift; adapted from here: https://github.com/serebrov/zmk-config/blob/master/config/microdox.keymap
            binding-1 = when held, binding-2 = when tapped
        */
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        as_slw: auto_shift_slw {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        as_2tap: auto_shift_2tap_revert {
            // making quick-tap longer, like tapping-term, lets 2x-tap-then-hold repeat the key
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <230>;
            quick-tap-ms = <230>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // TBD layer Hold for 1, Tap for 2; adapted from https://www.reddit.com/r/ErgoMechKeyboards/comments/123sapj/zmk_question_can_i_layertap_with_a_macro/
        lht: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&to>;
        };

        lt_fst: layer_shift_faster {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <120>; // 90 seemed too fast
            quick-tap-ms = <0>;  // â–¢ this also need âˆ†?
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // WIP: make 3-way toggle

    };

    keymap {
        compatible = "zmk,keymap";
        
        /*****************************************************************************************************
        * L0 âšª ENGRAM
            URL layout: http://www.keyboard-layout-editor.com/#/gists/32760c7c88bd4bd39b3eba742b14dcb7
            NOTES:
                â€¢ ALT LAYOUTS must be LOWER in stack than any higher ones want to layer-hold shift to
                â€¢ SYNTAX for mod-morph holds: "&<macro-named> <hold-key> 0"
                â€¢ AHK mappings (updated 2024-05-05)
                    F14 ~ing
                    F15 ~tion
                    F20 Ã˜
                    F21 â€¢
            
            TODO:
                â–¢ see also Keyboard Layout Editor for TODO items (â†‘ link above)
                â–¢ Qu,qu,Q,q ...
                â–£ trying 'faster' tap-term for the {K,NUM} layer-hold - â–¢probably fine tune as get faster
                â–¢ the Hold-RH-Thumb {\} do something else? [right now tap-while-shift = bkspc / hold = pipe]
            */

            // DEFINES:
                // HOLD MODS:
                #define _B_GUI        &hm_slw LGUI B             // GUI/Win on pinkie fingers
                #define _Y_SFT        &hm_l LSHFT Y              // Shift on ring fingers
                #define _O_ALT        &hm_l LALT O               // Alt on middle fingers
                #define _U_CTL        &hm_l LCTRL U              // Ctrl on index fingers
                #define _L_CTL        &hm_r RCTRL L              // Ctrl
                #define _D_ALT        &hm_r RALT D               // Alt
                #define _W_SFT        &hm_r RSFT W               // Shift
                #define _V_GUI        &hm_slw RGUI V             // GUI/Win
                
                // Mod-taps, Mod-morphs, etc.:
                #define MT_TB_SHFTB   &mt LS(TAB) TAB
                
                // Combined mods:
                #define _HYPER &kp    LC(LA(LS(LGUI)))
                #define _MEH &kp      LC(LA(LSHFT))
                
                // Mod-taps, Mod-morphs, etc. for THUMBS
                #define _SHF_BSP_L    &mm_SHIFT_BACKSPACE_L
                #define _SHF_BSP_R    &mm_SHIFT_BACKSPACE_R
                #define AS_Hm_CtlHm   &as_slw RC(HOME) HOME
                #define AS_Bk_CtlBk   &as_slw RC(BSPC) BSPC
                #define AS_En_CtlEn   &as_slw RC(END) END
                #define TD_ScrnShots  &TD_WinScreenshot_SnagIt   // 1x: Win+Shift+S   2x: Ctrl+Alt+P
                
                #define NUM_LR_NUM    &ht_num_tolr_tonum L_NUM 0

                #define TION_GRAVE    &m_mmsNG2_Tion GRAVE 0

                //#define _SHF_LTGT_BK  &mm_LthGth_Bksp
                #define _SHF_BSLH_BKSP  &mm_Bslh_Bksp
            // end defines

            engram_layer { bindings = <
                &m_mmsNG2_Tild PIPE 0   &m_mmsNG2_Star N1 0  &m_mmsNG2_Qstn N2 0  &m_mmsNG2_Cmma N3 0  &m_mmsNG2_Apos N4 0  &m_mmsNG2_Ing N5 0      &to L_DVK                                                                    &sl L_UTL  &m_mmsNG2_Tion N6 0    &m_mmsNG2_Quot N7 0  &m_mmsNG2_Perd N8 0  &m_mmsNG2_Excl N9 0  &m_mmsNG2_Equl N0 0  &kp Z
                &kp ESC                 _B_GUI               _Y_SFT               _O_ALT               _U_CTL               &m_mmsNG2_Lpar AT 0     _HYPER                                                                       _HYPER     &m_mmsNG2_Rpar DLLR 0  _L_CTL               _D_ALT               _W_SFT               _V_GUI               &m_mmsNG2_Slsh PERCENT 0
                MT_TB_SHFTB             &kp C                &kp I                &kp E                &kp A                &m_mmsNG2_Semi LT 0     _MEH          _SHF_BSP_L   NUM_LR_NUM    &lt L_LET F20  _SHF_BSLH_BKSP       _MEH       &m_mmsNG2_Coln GT 0    &kp H                &kp T                &kp S                &kp N                &m_mmsNG2_Mnus UNDERSCORE 0
                &TD_Emj_WinDsk          &lt L_EDT G          &kp X                &lt L_UTL J          &lt_fst L_NUM K      &m_mmsNG2_Amps F21 0                             AS_Hm_CtlHm      &kp PG_UP                                     &m_mmsNG2_Hash PLUS 0  &kp R                &kp M                &kp F                &kp P                &as_Qu Q 0
                &m_mmsNG2_Cret GRAVE 0  _tbd_                &TD_Rtclick_P        &kp LEFT             &kp RIGHT                                      AS_Bk_CtlBk  &kp DEL  AS_En_CtlEn        &kp PG_DN  &lt L_FNC ENTER  &kp SPACE                               &kp UP               &kp DOWN             &as LS(LBKT) LBKT    &as LS(RBKT) RBKT    TD_ScrnShots
            >; };

            // #UNDEFs
                #undef _B_GUI
                #undef _Y_SFT
                #undef _O_ALT
                #undef _U_CTL
                #undef _L_CTL
                #undef _D_SFT
                #undef _W_ALT
                #undef _V_GUI
                #undef MT_TB_SHFTB
                #undef _HYPER
                #undef _MEH
                #undef _SHF_BSP_L 
                #undef TD_ScrnShot
                #undef _SHF_BSP_R 
                #undef AS_Hm_CtlHm
                #undef AS_Bk_CtlBk
                #undef AS_En_CtlEn
                #undef NUM_NUM_LR
                #undef TION_GRAVE
                #undef _SHF_BSLH_BKSP
            // end undefs

        // END Engram

        /*****************************************************************************************************
        * L1 âš«: DVORAK
            *      http://www.keyboard-layout-editor.com/#/gists/fdcbdec4d9a329533f670a566a99338f
            */

            // #DEFINEs
                // HOLD mods DVK specific:
                #define _SQT_GUI      &hm_slw LGUI SQT          // GUI/Win on pinkie fingers / [] revisit if R.h. / L.h. differences put back
                #define _CMA_SFT      &hm_l LSHFT COMMA         // Shift on ring fingers
                #define _DOT_ALT      &hm_l LALT DOT            // Alt on middle fingers
                #define _P_CTL        &hm_l LCTRL P             // Ctrl on indexs
                #define _Y_RALT       &hm_slw RALT Y            // *Special extra Right-Alt when don't want l-alt because of AltSnap utility use
                #define _G_CTL        &hm_r RCTRL G             // Ctrl
                #define _C_ALT        &hm_r RALT C              // Alt
                #define _R_SFT        &hm_r RSHFT R             // Shift 
                #define _L_GUI        &hm_slw RGUI L            // GUI/Win / [] revisit if R.h. / L.h. differences put back
            // end defs

            dvorak_layer { bindings = <
                &as RS(EQUAL) EQUAL  &as RS(N1) N1   &as RS(N2) N2  &as RS(N3) N3  &as RS(N4) N4  &as RS(N5) N5  &to L_0                              ___   &as LS(N6) N6  &as LS(N7) N7  &as LS(N8) N8  &as LS(N9) N9      &as LS(N0) N0      &as LS(BSLH) BSLH
                ___                  _SQT_GUI        _CMA_SFT       _DOT_ALT       _P_CTL         _Y_RALT        ___                                  ___   &kp F          _G_CTL         _C_ALT         _R_SFT             _L_GUI             &as LS(SLASH) SLASH
                ___                  &kp A           &kp O          &kp E          &kp I          &kp U          ___       ___   ___  ___  ___        ___   &kp D          &kp H          &kp T          &kp N              &kp S              &as LS(MINUS) MINUS
                &TD_CpWrd_CpLock     &lt L_EDT SEMI  &kp Q          &lt L_UTL J    &lt L_NUM K    &kp X                         ___    ___                  &kp B          &kp M          &kp W          &kp V              &kp Z              &m_mmsDVK_Colon F21 0
                &TD_Emj_WinDsk       ___             ___            ___            ___                               ___  ___  ___      ___  ___  ___                      &kp UP         &kp DOWN       &as LS(LBKT) LBKT  &as LS(RBKT) RBKT  &to L_NUM
            >; };

            // #UNDEFs
                #undef _SQT_GUI
                #undef _CMA_SFT
                #undef _DOT_ALT
                #undef _P_CTL  
                #undef _Y_RALT
                #undef _G_CTL  
                #undef _C_ALT  
                #undef _R_SFT  
                #undef _L_GUI  
        // END Dvorak
        
        /*****************************************************************************************************
        * L2 ðŸ”µ Lightroom (& TBD Photoshop)
            *      http://www.keyboard-layout-editor.com/#/gists/ce40ef1f57700f3871b7af5a965ad51b
            *      This is for when the RIGHT HAND is on the mouse primarily; so r.h.s. just left to entirely float through. See notes on KLE.
            *   [.] layer-hold else TD - works? 7/3 "expected number or parenthesized expression"; try adding & bef TD? â†’ compiled, but the TD didn't fire at all, just layer-hold
            */

            // defines:
                #define VRT_CPY     &kp LC(APOS)
                #define MOD_LIB     &kp LC(LA(N1))
                #define MOD_DEV     &kp LC(LA(N2))
                #define MOD_MAP     &kp LC(LA(N3))
                #define MOD_PRT     &kp LC(LA(N6))
                #define R_CA_R      &as LC(R) R
                #define DESEL       &as LC(D) LC(LS(D))
                #define SURV_SH     &as LS(N) N
                #define ZOOM_IN     &kp LC(EQUAL)
                #define ZOOM_OUT    &kp LC(MINUS)
                #define SPOT_LUM    &as LS(Q) Q
                #define DEV_AUTO    &TD_D_AUTO
            // end defines

            lr_layer { bindings = <
                &as LC(L) BSLH  &TD_LR_1   &TD_LR_2  &TD_LR_3  &TD_LR_4  &TD_LR_5  &to L_0                                       ZOOM_OUT  MOD_LIB  MOD_DEV  MOD_MAP  MOD_PRT  &kp N0  ___
                ___             ___        ___       ___       ___       &kp P     &kp M                                         ZOOM_IN   &kp K    ___      ___      ___      ___     ___
                ___             ___        ___       ___       ___       &kp S     &kp LS(W)   R_CA_R  &to L_0  _tbd_  _tbd_     _tbd_     _tbd_    ___      ___      ___      ___     _tbd_
                &TD_LR_E        ___        ___       DESEL     DEV_AUTO  SURV_SH                          ___    ___                       _tbd_    ___      ___      ___      ___     SPOT_LUM
                ___             &kp LS(T)  &kp J     ___       ___                             ___  ___  ___      ___  ___     ___                  ___      ___      ___      ___     VRT_CPY
            >; };

             // undefs
                #undef VRT_CPY
                #undef MOD_LIB
                #undef MOD_DEV
                #undef MOD_MAP
                #undef MOD_PRT
                #undef R_CTL_R
                #undef DESEL
                #undef SURV_SH
                #undef ZOOM_IN
                #undef ZOOM_OUT
                #undef SPOT_LUM
                #undef DEV_AUTO
             // end undefs

        // END Lightroom

        /*****************************************************************************************************
        * L3 ðŸŸ¢ NUM-pad layer
            *      http://www.keyboard-layout-editor.com/#/gists/c51e298f5744feba159cde9973f47b92
            *      Uses non-keypad NUMERAL symbols since plan to use as "main" numbers method eventually as practice more.
            *      See companion 'mod_morphs_nums' file
            *      Some same as NGM / but redefined to use KP symbol: - * / - ... see AHK for couple special-case overrides like Excel
            */ 

            // DEFINES:
                #define _KP_ENT     &kp KP_ENTER

                #define _B_A        &m_mmsNUM_BA LS(A) 0
                #define _D_C        &m_mmsNUM_DC LS(C) 0
                #define _F_E        &m_mmsNUM_FE LS(E) 0

                #define _BKSL_PIPE  &m_mmsNG2_Bksl PIPE 0
                #define _DLLR_EURO  &m_mmsNUM_Dllr LC(LA(F16)) 0    // AHK: â‚¬
                #define _COLN_SEMI  &m_mmsNUM_Coln SEMI 0

                #define _LPAR_LT    &m_mmsNUM_Lpar LT 0
                #define _DOT_CMMA   &m_mmsNUM_Dot COMMA 0
                #define _RPAR_GT    &m_mmsNUM_Rpar GT 0

                #define _EQAL_TILD  &m_mmsNUM_Eqal TILDE 0
                #define _MULT_TIMES &m_mmsNUM_Mult LC(LA(F23)) 0    // AHK: Ã—
                #define _ZERO_DEGR  &m_mmsNUM_Zero LC(LA(F22)) 0    // AHK: Â°
                #define _PLUS_AMP   &m_mmsNUM_Plus LS(N7) 0
                
                #define _DIV_PCT    &m_mmsNUM_Divd PERCENT 0
                #define _MNUS_UNDR  &m_mmsNUM_Mnus LS(MINUS) 0
                #define _CRET_GRAV  &m_mmsNUM_Cret GRAVE 0

                #define _ENT_CTLENT &as LC(ENTER) ENTER
            // end defines
        
            numpad_layer { bindings = <
                ___      ___           ___        ___       ___        ___  &to L_NGM                                                _B_A  _BKSL_PIPE  _LPAR_LT          _DOT_CMMA       _RPAR_GT        _EQAL_TILD    &m_CSA_R
                ___      &kp LEFT_GUI  &kp LSHFT  &kp LALT  &kp LCTRL  ___  ___                                                      _D_C  _DLLR_EURO  &as_minutes 0 N7  &as_am_uc 0 N8  &as_pm_uc 0 N9  _MULT_TIMES   _DIV_PCT
                ___      ___           ___        ___       ___        ___  ___      &kp LSHFT  &to L_0    _KP_ENT   &kp BSPC        _F_E  _COLN_SEMI  &as_4th 0 N4      &as_am_lc 0 N5  &as_pm_lc 0 N6  _ZERO_DEGR    _MNUS_UNDR
                &to L_0  &mo L_EDT     ___        ___       &kp X      ___                         ___      &kp RS(TAB)                    ___         &as_1st 0 N1      &as_2nd 0 N2    &as_3rd 0 N3    _PLUS_AMP     _CRET_GRAV
                ___      ___           ___        ___       ___                         ___  ___  ___        &kp TAB  _ENT_CTLENT  &kp SPACE           ___               ___             ___             ___           &to L_0
            >; };
            //&kp KP_ENTER - put back?

            // #UNDEFS:
                #undef _KP_ENT   
                #undef _B_A      
                #undef _D_C      
                #undef _F_E      
                #undef _BKSL_PIPE
                #undef _DLLR_EURO
                #undef _COLN_SEMI
                #undef _LPAR_LT  
                #undef _DOT_CMMA 
                #undef _RPAR_GT  
                #undef _EQAL_TILD
                #undef _MULT_TIME
                #undef _ZERO_DEGR
                #undef _PLUS_AMP 
                #undef _DIV_PCT  
                #undef _MNUS_UNDR
                #undef _CRET_GRAV
                #undef _ENT_CTLENT
            // END UNDEFS
        // END Numpad

        /*****************************************************************************************************
        * L4 ðŸ”´ Utils & Specials & Macros/tests & Easy certain symbols
            *       http://www.keyboard-layout-editor.com/#/gists/2d2d37deb742cc77638e81cb0b875106
            *  # keys send to that layer-#
            *  &m_SLEEP & &m_HIBER = Windows-menu-compatible key shortcuts to invoke Sleep, Hibernate from start-menu
            *  &m_CSA_R = Ctrl+Shift+Alt+(R) => SlickRun - but macro to hold/release deliberately because timing issues with RDP
            *
            * [ ] TODO:
            *      [ ] put back LS(N2)..N4?
            */
            
            // #DEFs
                #define _BTLD &bootloader
                #define _RgbMem &rgb_ug RGB_MEFS_CMD
                #define _RGB_TG &rgb_ug RGB_TOG
                #define _BKL_TG &bl BL_TOG
                #define _MONOFF &kp RC(RG(L)) // Win+Ctrl+L invokes my AHK lock+monoff macro

            util_layer { bindings = <
                _x_         &to 1         &to 2         &to 3         &to 4         &to 5         &to L_0                                                      _MONOFF   &to 6    &to 7    &to 8     &to 9      &to 10   &to 0
                _x_         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  _x_                                                          &m_SLEEP  _x_      &kp N1   &kp N2    &m_CSA_R   &kp N3   &kp RS(N2)
                ___         _x_           _x_           _x_           _x_           _x_           _x_         _x_   &kp C_VOL_UP      _RGB_TG   &bt BT_CLR     &m_HIBER  _x_      &m_M1    &m_M2     &m_M3      &m_M4    &kp RS(N3)
                &bt BT_CLR  _x_           _x_           _x_           _x_           _x_                            &kp C_VOL_DN        _BKL_TG                           _x_      &m_M5    &m_M6     &m_M7      &m_M8    &kp RS(N4)
                _BTLD       _x_           _x_           ___           ___                             ___    ___   &kp C_MUTE           &bt BT_CLR_ALL  ___  ___                  &m_M9    &m_M10    &kp N7     &kp N8   _BTLD
            >; };

            // #UNDEFs
                #undef _BTLD
                #undef _RgbMem
                #undef _RGB_TG
                #undef _BKL_TG
                #undef _MONOFF
        // END Utils

        /*****************************************************************************************************
        * L5 ðŸŸ£ Function Keys
            *      http://www.keyboard-layout-editor.com/#/gists/d61490ab54f1d9c63f17ee2d25b40732
            *    NOTES:
            *       [x] 2024-04-14 trying more lateral for easier reach for commons; (and makes room for upper-ones) // nah, too awkward
            *       [.] 2024-04-20 trying alt with 13-24 on left hand
            */

            // #DEF
                #define _F19_SFT &hm_l LSHIFT F19
                #define _F20_ALT &hm_l LALT F20
                #define _F21_CTL &hm_l LCTRL F21
                #define  _F7_CTL &hm_r RCTRL F7
                #define  _F8_ALT &hm_r RALT F8
                #define  _F9_SFT &hm_r RSHIFT F9

            fn_1_12_layer { bindings = <
                _x_    _x_       &kp F22   &kp F23   &kp F24   _x_   &to L_0                                         ___   _x_   &kp F10   &kp F11   &kp F12    _x_       _x_
                ___    &kp LWIN  _F19_SFT  _F20_ALT  _F21_CTL  _x_   ___                                             ___   _x_   _F7_CTL   _F8_ALT   _F9_SFT    &kp LWIN  _x_
                ___    _x_       &kp F16   &kp F17   &kp F18   _x_   ___              _x_   _x_     _x_   _x_        ___   _x_   &kp F4    &kp F5    &kp F6     _x_       _x_
                _x_    _x_       &kp F13   &kp F14   &kp F15   _x_                        _x_         _x_                  _x_   &kp F1    &kp F2    &kp F3     _x_       _x_
                _x_    _x_       _x_       ___       ___                      ___  ___  _x_            _x_  _x_  _x_             ___       ___       _x_        _x_       _x_
            >; };

            // #UNDEF
                #undef _F19_SFT
                #undef _F20_ALT
                #undef _F21_CTL
                #undef _F7_CTL
                #undef _F8_ALT
                #undef _F9_SFT

        // END Fn Keys

        /*****************************************************************************************************
        * L6 ðŸ§¢ Edit
            *      http://www.keyboard-layout-editor.com/#/gists/18e13161cf62a37e0ba0d751735110a1
            * [ ] other r.h.s. useful things?
            * [ ] turn Win+<> into timed-hold Macros? (see the slickrun example) -- for RDP because Win+ not reliable in RDP when sent too fast
            * &m_CSA_V = Ctrl+Shift+Alt+V (for ClipMate), but in slight-key-delayed macro so works through RDP
            * Copy|Paste Unformatted:
                - &m_WC_* = same key-delayed macro for Win+Ctrl+C|V (AHK copy|paste unformatted)
                - [.] temp trying w/o Win key at all using **F13** instead - see AHK
                - [.] temp +ClipMate on NGM V position
            */
            
            navnedit_layer { bindings = <
                _x_   _x_   _x_          &kp LC(S)   &kp LC(O)     &kp LC(W)   &to L_0                                                     ___   _x_        _x_        _x_       _x_             _x_       _x_
                ___   _x_   _x_          _x_         &kp LC(K)     &kp LC(I)   _x_                                                         _x_   _x_        &kp RCTRL  &kp RALT  &kp RSHFT       &kp RGUI  _x_
                ___   _x_   &kp LC(X)    &kp LC(C)   &kp LC(V)     &kp LC(B)   _x_        &m_SEL_WRD_L  &m_SEL_WRD_R   _x_   &kp BSPC      _x_   &kp PSCRN  &kp INS    &kp CAPS  &kp KP_NUMLOCK  &kp SLCK  &kp PAUSE_BREAK
                ___   _x_   &kp LG(TAB)  &kp F13     &kp LC(F13)   &m_CSA_V                             &m_SEL_LINE     _x_                      _x_        _x_        _x_       &m_CSA_V        _x_       _x_
                ___   _x_   &kp LSHIFT   &kp LALT    &kp TAB                   &kp LC(Z)   &kp LC(Y)     &kp RC(A)       &m_MinWin  ___  ___                ___        ___       _x_             _x_       _x_
            >; };

        // END Edit

        /*****************************************************************************************************/
        // L7 PLAIN letters - for hold to override any main-layer holds
            
            plain_letters_layer { bindings = <
                ___  ___    ___    ___    ___    ___  ___                               ___    ___    ___    ___    ___    ___    ___
                ___  &kp B  &kp Y  &kp O  &kp U  ___  ___                               ___    ___    &kp L  &kp D  &kp W  &kp V  ___
                ___  &kp C  &kp I  &kp E  &kp A  ___  ___      ___  ___   ___  ___      ___    ___    &kp H  &kp T  &kp S  &kp N  ___
                ___  &kp G  &kp X  &kp J  &kp K  ___               ___     ___                 ___    &kp R  &kp M  &kp F  &kp P  ___ 
                ___  ___    ___    ___    ___           ___  ___  ___       ___  ___  ___             ___    ___    ___    ___    ___
            >; };

        // END plain letters


        /*****************************************************************************************************
        * L8 Alt Numpad - using actual KP versions of numbers; in case need like Alt+<code> testing.
            *      (no yet KeyboardLayoutEditor)
            */
            kp_layer { bindings = <
                _x_    _x_        _x_         _x_        _x_        _x_    &to L_0                                                   ___    _x_    _x_         _x_         _x_         _x_    _x_
                ___    &kp LWIN   &kp LSHFT   &kp LALT   &kp LCTRL  _x_    _x_                                                       _x_    _x_    &kp KP_N7   &kp KP_N8   &kp KP_N9   _x_    _x_
                ___    _x_        _x_         _x_        _x_        _x_    _x_           _x_  _x_    _x_   _x_                       _x_    _x_    &kp KP_N4   &kp KP_N5   &kp KP_N6   _x_    _x_
                _x_    _x_        _x_         _x_        _x_        _x_                      _x_      _x_                                   _x_    &kp KP_N1   &kp KP_N2   &kp KP_N3   _x_    _x_
                _x_    _x_        _x_         ___        ___                      ___  ___  _x_        _x_  &kp ENTER  &kp KP_N0                   _x_         _x_         _x_         _x_    _x_
            >; };
        // END KP Numpad

    };
};





